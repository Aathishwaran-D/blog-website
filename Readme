Here is a complete **mini documentation** for your React + Spring Boot blog app covering **all post-related functionalities** and the associated **API endpoints**:

---

## 📝 Blog App – Post Module Documentation (React + Spring Boot)

This document explains all the components, API endpoints, and features related to **CRUD operations on posts** in your blog application.

---

## 📂 React Components Overview

| Component Name | Purpose |
|----------------|---------|
| `CreatePost.jsx` | Create a new blog post |
| `ViewPost.jsx`   | View all blog posts |
| `UpdatePost.jsx` | Update an existing post |
| `DeletePost.jsx` | Delete a specific post |

---

## 🔁 CRUD Operations Summary

| Operation | Method | Endpoint | Description |
|----------|--------|----------|-------------|
| Create   | POST   | `/posts` | Add a new blog post |
| Read All | GET    | `/posts` | Fetch all blog posts |
| Read One | GET    | `/posts/{id}` | Fetch a single post by ID |
| Update   | PUT    | `/posts/{id}` | Update a post by ID |
| Delete   | DELETE | `/posts/{id}` | Delete a post by ID |

---

## 📤 CreatePost.jsx

### 📌 Description:
This component allows users to submit a new blog post.

### ✅ API Used:
```http
POST /posts
```

### 🔸 Payload:
```json
{
  "title": "Example Title",
  "content": "Post content here",
  "author": "John Doe",
  "createdAt": "2025-04-30T13:00:00Z",
  "updatedAt": "2025-04-30T13:00:00Z"
}
```

---

## 📥 ViewPost.jsx

### 📌 Description:
Displays all existing blog posts in a table format.

### ✅ API Used:
```http
GET /posts
```

### 🔸 Response Example:
```json
[
  {
    "id": 1,
    "title": "React Intro",
    "content": "Learn about React...",
    "author": "Aathish",
    "createdAt": "2025-04-29T10:00:00Z",
    "updatedAt": "2025-04-29T10:00:00Z"
  }
]
```

---

## 🔧 UpdatePost.jsx

### 📌 Description:
Allows editing a blog post selected by its ID.

### ✅ APIs Used:
1. Fetch existing data:
```http
GET /posts/{id}
```

2. Submit updated post:
```http
PUT /posts/{id}
```

### 🔸 Request Body Example:
```json
{
  "title": "Updated Title",
  "content": "Updated content",
  "author": "Aathish",
  "updatedAt": "2025-04-30T15:00:00Z"
}
```

---

## 🗑️ DeletePost.jsx

### 📌 Description:
Allows deletion of a post with confirmation.

### ✅ API Used:
```http
DELETE /posts/{id}
```

### 🔸 Example:
```http
DELETE /posts/2
```

---

## 🛠 Backend Controller – Spring Boot

Ensure your Spring Boot controller looks like this:

```java
@RestController
@RequestMapping("/posts")
@CrossOrigin(origins = "http://localhost:5173") // for React CORS
public class BlogController {

    @Autowired
    private PostService postService;

    @GetMapping
    public List<Post> getAllPosts() { return postService.getAllPosts(); }

    @GetMapping("/{id}")
    public Post getPost(@PathVariable Long id) { return postService.getPostById(id); }

    @PostMapping
    public Post createPost(@RequestBody Post post) { return postService.createPost(post); }

    @PutMapping("/{id}")
    public Post updatePost(@PathVariable Long id, @RequestBody Post post) {
        return postService.updatePost(id, post);
    }

    @DeleteMapping("/{id}")
    public void deletePost(@PathVariable Long id) { postService.deletePost(id); }
}
```

---

## ✅ Frontend Routing Example (React Router)

```jsx
import { Routes, Route } from 'react-router-dom';
import CreatePost from './components/CreatePost';
import ViewPost from './components/ViewPost';
import UpdatePost from './components/UpdatePost';
import DeletePost from './components/DeletePost';

<Routes>
  <Route path="/create" element={<CreatePost />} />
  <Route path="/view" element={<ViewPost />} />
  <Route path="/update" element={<UpdatePost />} />
  <Route path="/delete" element={<DeletePost />} />
</Routes>
```

---

Would you like this document exported as a **PDF** or **Markdown (.md)** file?
